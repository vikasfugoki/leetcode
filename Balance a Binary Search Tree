/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    void inorder (TreeNode* root, vector<int>& sorted) {
        if (root == NULL)
            return;
        
        inorder(root->left, sorted);
        sorted.push_back(root->val);
        inorder(root->right, sorted);
    }
    
    TreeNode* buildUtil (int l, int r, vector<int> sorted) {
        if (l>r)
            return NULL;
        if (l == r)
            return new TreeNode(sorted[l]);
        int mid = (l+r)/2;
        
        TreeNode* newnode = new TreeNode(sorted[mid]);
        newnode->left = buildUtil(l, mid-1, sorted);
        newnode->right = buildUtil(mid+1, r, sorted);
        return newnode;
    }
    
    TreeNode* balanceBST(TreeNode* root) {
        vector<int> sorted;
        inorder(root, sorted);
        root = buildUtil(0, sorted.size()-1, sorted);
        return root;
    }
};
