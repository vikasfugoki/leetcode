class Solution {
public:
    
    // function
    bool isValid (vector<int>& piles, int H, int mid) {
        int hrs =0;
        
        for (int i=0; i<piles.size(); i++) {
            if (piles[i] <= mid) {
                hrs++;
            }
            else {
                hrs += ceil (float(piles[i]/(mid*1.0)));
            }
            
           
        }
        cout <<hrs << " " << mid << endl;
        if (hrs > H)
            return false;
        return true;
    }
    
    int minEatingSpeed(vector<int>& piles, int H) {
     if (piles.size() == 0)
         return 0;
     if (piles.size() == 1) {
         if (piles[0]%H == 0)
             return piles[0]/H;
         return piles[0]/H + 1;
     }
        
        int l = INT_MAX;
        int r = INT_MIN;
        int len = piles.size();
        for (int i=0; i<len; i++) {
            l = min (l, piles[i]);
            r = max(r, piles[i]);
        }
        l = 0;
        // what are the things i need in this world 
        
        while (l <= r) {
            int mid = (l+r)/2;
            
            if (isValid(piles, H, mid)) {
                r = mid-1;
            }
            else {
                l = mid+1;
            }
        }
        
        return l;
    }
};
