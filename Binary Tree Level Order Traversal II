/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        vector<vector <TreeNode*>> blist;
        vector<vector<int>> vv;
        if (root == NULL)
            return vv;
        
        vector<TreeNode*> slist;
        
        slist.push_back(root);
        blist.push_back(slist);
        int k = 0;
        
        while (k < blist.size()) {
            slist.clear();
            int i = 0;
            while (i < blist[k].size()) {
                if (blist[k][i]->left)
                    slist.push_back(blist[k][i]->left);
                if (blist[k][i]->right)
                    slist.push_back(blist[k][i]->right);
                i++;
            }
            
            if (slist.size() != 0) {
                blist.push_back(slist);
                //k++;
            }
            k++;
        }
        
        
        vector <vector <int>> ans;
        vector <int> sans;
        int l = blist.size();
        for (int i=l-1; i>=0; i--) {
              sans.clear();
            for (int j=0; j<blist[i].size(); j++) {
                  sans.push_back(blist[i][j]->val);
              }
            ans.push_back(sans);
        }
        
        return ans;
        //return blist;
    }
};
