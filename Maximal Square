class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        int r = matrix.size();
        if (r == 0)
            return 0;
        int c = matrix[0].size();
        
        vector<vector<int>> dp(r, vector<int>(c, 0));
        int max = 0;
        // base condition
        for (int i=0; i<r; i++) {
            if (matrix[i][0] == '1') {
                dp[i][0] = 1;
                max = 1;
            }
            else {
                dp[i][0] = 0;
            }
        
        }
        
        // base condition
        for (int j=0; j<c; j++) {
            
            if (matrix[0][j] == '1') {
                dp[0][j] = 1;
                max = 1;
            }
            else {
                dp[0][j] = 0;
            }
        
        }
        
        for (int i=1; i<r; i++) {
            for (int j=1; j<c; j++) {
                if (matrix[i][j] == '0') {
                    dp[i][j] = 0;
                }
                else {
                    
                    if (dp[i-1][j] && dp[i][j-1] && dp[i-1][j-1]) {
                        
                        dp[i][j] = min (dp[i-1][j-1], min (dp[i-1][j], dp[i][j-1])) + 1;
                    }
                    else {
                        dp[i][j] = 1;
                    }
                          
                }
                
                if (dp[i][j] > max)
                max = dp[i][j];
            }
            
            
        }
        
        for (int i=0; i<r; i++) {
            for (int j=0; j<c; j++) {
                cout << dp[i][j] << " ";
            }
            cout << endl;
        }
        if (max == 1 || max == 0)
            return max;
        return max*max;
    }
};
