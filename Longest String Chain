class Solution {
public:
    
    
    bool check (string a, string b) {
        //sort (a.begin(), a.end());
        //sort (b.begin(), b.end());
        vector <int> hash(26, 0);
        for (int i=0; i<a.length(); i++) {
            hash[a[i]-'a']++;
        }
        for (int i=0; i<b.length(); i++) {
            hash[b[i]-'a']--;
        }
        int count = 0;
        for (int i=0; i<26; i++) {
            if (hash[i] != 0)
                count++;
        }
        if (count == 1)
            return true;
        return false;
    }
    
    
    int longestStrChain(vector<string>& words) {
        
        sort (words.begin(), words.end(), []
    (const std::string& first, const std::string& second){
        return first.size() < second.size();
    });
        cout << endl;
        vector<int> dp(words.size(), 1);
        
        for (int i=1; i<words.size(); i++) {
            for (int j=i-1; j>=0; j--) {
                if (words[i].length() == words[j].length()+1) {
                    bool flag = check (words[i], words[j]);
                    if (flag == true) {
                        if (dp[i] < dp[j] + 1)
                            dp[i] = dp[j]+1;
                    }
                }
            }
        }
        
        int res = 0;
        for (int i=0; i<words.size(); i++) {
            if (res < dp[i]) {
                res = dp[i];
            }
            
           // cout << dp[i] << " ";
        }
        
        return res;
        //return 0;
    }
};
