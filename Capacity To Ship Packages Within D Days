class Solution {
public:
    
    // function
    bool isValid (vector<int>& weights, int D, int mid) {
        int temp = 0;
        int day = 0;
        int i;
        int included = 0;
        // follow the greedy st.
        for ( i=0; i<weights.size(); i++) {
            if (weights[i] > mid)
                return false;
            day = (temp+weights[i] <= mid)? day+0:day+1;
            temp = (temp+weights[i] <= mid)? temp+weights[i]:weights[i];
            
        }
        day = (temp <= mid)? day+1:day+0;
        cout << day << endl;
        if (day <= D)
            return true;
        return false;
        
      }
    
    int shipWithinDays(vector<int>& weights, int D) {
        
        if (weights.size() == 0) {
            return 0;
        }
        if (weights.size() == 1) {
            return weights[0];
        }
        //isValid (weights, D, 11);
        //return 0;
        int sum = 0;
        int l = INT_MIN;
        for (int i=0; i<weights.size(); i++) {
            sum += weights[i];
            l = max (l, weights[i]);
        }
        
        
        int r = sum;
        cout << l << " " << r;
        while (l <= r) {
            int mid = (l+r)/2;
            cout << mid << " ";    
            if (isValid (weights, D, mid)) {
                r = mid-1;
            }
            else {
                l = mid+1;
            }
        }
        
        return l;
    }
};
