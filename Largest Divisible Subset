class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int len = nums.size();
        
        if (len <= 0) {
            return vector<int>(0);
        }
        
       
        vector<int> res;
        vector<int> dp(len, 1);
        vector<int> preIndex(len);
        if (len == 1)
            return nums;
        sort (nums.begin(), nums.end());
        for (int i=1; i<len; i++) {
            for (int j=i-1; j>=0; j--) {
                if (nums[i]%nums[j] == 0) {
                    int temp = dp[j] + 1;
                    if (temp > dp[i])
                    {
                        dp[i] = dp[j] + 1;
                        preIndex[i] = j;
                    }
                }
            }
        }
        int max = len-1;
        for (int i=len-1; i>=0; i--) {
            if (dp[i] > dp[max]) {
                max = i;
            }
        }
        
        if (dp[max] == 1) {
            res.push_back(nums[0]);
        }
           
        else {
            res.push_back(nums[max]);
            int index = preIndex[max];
            while (dp[index] > 1) {
                res.push_back(nums[index]);
                index = preIndex[index];
            }
            res.push_back(nums[index]);
        }
        
        return res;
        
        
    }
};
