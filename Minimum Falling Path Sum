class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& A) {
        int r = A.size();
        cout << r << endl;
        if (r == 0)
            return 0;
        if (r == 1)
            return A[0][0];
        vector <vector <int>> dp (r, vector<int> (r, 0));
        int i = 0;
        int j = 0;
        for (i=0; i<r; i++) {
           dp[0][i] = A[0][i];
        }
        int res = 99999;
        for (i=1; i<r; i++) {
            for (j=0; j<r; j++) {
                if (j == 0) {
                    dp[i][j] = min (dp[i-1][j], dp[i-1][j+1]) + A[i][j];
                }
                else if (j == r-1){
                    dp[i][j] = min (dp[i-1][j], dp[i-1][j-1]) + A[i][j];
                }
                else {
                    dp[i][j] = min (dp[i-1][j], min (dp[i-1][j-1], dp[i-1][j+1])) + A[i][j];
                }
                
                if (res > dp[i][j] && i == r-1)
                    res = dp[i][j];
            }
        }
        
        return res;
    }
};
