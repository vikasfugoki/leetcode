class Solution {
public:
    
    bool ishappy (vector<vector<int>>& preferences, unordered_map <int, int> mp, int person) {
        
        vector<int> list = preferences[person];
        for (auto &i : list) {
            if (i  == mp[person])
                return true;
            vector<int> tmp = preferences[i];
            int frnd = mp[i];
            // check wether the given i does have mpre preferences for the cur person or his partner
            for (auto &j : tmp) {
                if (j == frnd)
                    break;
                if ( j == person)
                    return false;
            }
        }
            
        return true;
    }
    
    int unhappyFriends(int n, vector<vector<int>>& preferences, vector<vector<int>>& pairs) {
        int len = pairs.size();
        if (len == 0)
            return 0;
        
        unordered_map <int, int> mp;
        for (int i=0; i<len; i++) {
            mp[pairs[i][0]]= pairs[i][1];
            mp[pairs[i][1]] = pairs[i][0];
        }
        
        int res = 0;
        for (int i=0; i<n; i++) {
            if (mp[i] != -1) {
                if (ishappy(preferences, mp, i) == false) {
                    res++;
                }
                
                
            }
        }
        return res;
    }
};
