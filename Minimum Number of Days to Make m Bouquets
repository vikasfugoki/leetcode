class Solution {
public:
    
    // function
    bool isvalid (vector<int>& bloomDay, int m, int k, int mid) {
        
        int count = 0;
        int size = 0;
        
        for (int i=0; i<bloomDay.size(); i++) {
            size = (bloomDay[i] <= mid)? size+1 : 0;
            if (size == k) {
                size = 0;
                count++;
            }
            
            if (count == m)
                return true;
        }
        return false;
    }
    
    int minDays(vector<int>& bloomDay, int m, int k) {
        int len = bloomDay.size();
        if (len == 0 || m == 0 || k== 0)
            return 0;
        if (m *k > len) {
            return -1;
        }
        
        int l = INT_MAX;
        int r = INT_MIN;
        
        for (int i=0; i<len; i++) {
            l = min (l, bloomDay[i]);
            r = max (r, bloomDay[i]);
        }
        cout << l << " " << r << endl;
        while (l <= r) {
            int mid = l + (r-l)/2;
            
            if (isvalid(bloomDay, m, k, mid)) {
                r = mid-1;
            }
            else {
                 l= mid+1;
            }
        }
        return l;
    }
};
